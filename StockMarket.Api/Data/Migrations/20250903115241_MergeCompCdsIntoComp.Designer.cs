// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockMarket.Api.Data;

#nullable disable

namespace StockMarket.Api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250903115241_MergeCompCdsIntoComp")]
    partial class MergeCompCdsIntoComp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StockMarket.Api.Models.Comp", b =>
                {
                    b.Property<int>("CompCd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("COMP_CD");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompCd"));

                    b.Property<string>("Add1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ADD1");

                    b.Property<string>("Add2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ADD2");

                    b.Property<decimal?>("AthoCap")
                        .HasColumnType("decimal(17, 2)")
                        .HasColumnName("ATHO_CAP");

                    b.Property<string>("Auditor")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("AUDITOR");

                    b.Property<decimal?>("AvgRt")
                        .HasColumnType("decimal(12, 4)")
                        .HasColumnName("AVG_RT");

                    b.Property<DateTime?>("BaseUpdDt")
                        .HasColumnType("datetime2")
                        .HasColumnName("BASE_UPD_DT");

                    b.Property<DateTime?>("BokClFdt")
                        .HasColumnType("datetime2")
                        .HasColumnName("BOK_CL_FDT");

                    b.Property<DateTime?>("BokClTdt")
                        .HasColumnType("datetime2")
                        .HasColumnName("BOK_CL_TDT");

                    b.Property<string>("CatTp")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("CAT_TP");

                    b.Property<string>("Cds")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("CDS");

                    b.Property<string>("Cflag")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("CFLAG");

                    b.Property<string>("CompNm")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("COMP_NM");

                    b.Property<string>("CseInstrCd")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CSEINSTR_CD");

                    b.Property<decimal?>("CtlRt")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("CTL_RT");

                    b.Property<string>("EMail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("E_MAIL");

                    b.Property<decimal>("FcVal")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("FC_VAL");

                    b.Property<string>("Flag")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("FLAG");

                    b.Property<DateTime?>("FlotDtFm")
                        .HasColumnType("datetime2")
                        .HasColumnName("FLOT_DT_FM");

                    b.Property<DateTime?>("FlotDtTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("FLOT_DT_TO");

                    b.Property<string>("Grp")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("GRP");

                    b.Property<decimal?>("IndxLst")
                        .HasColumnType("decimal(13, 4)")
                        .HasColumnName("INDX_LST");

                    b.Property<string>("InstrCd")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("INSTR_CD");

                    b.Property<DateTime?>("IpoCutoffDt")
                        .HasColumnType("datetime2")
                        .HasColumnName("IPO_CUTOFF_DT");

                    b.Property<string>("IsinCd")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("ISIN_CD");

                    b.Property<int?>("Ldrn")
                        .HasColumnType("int")
                        .HasColumnName("LDRN");

                    b.Property<decimal?>("MarFloat")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("MAR_FLOAT");

                    b.Property<int?>("Margin")
                        .HasColumnType("int")
                        .HasColumnName("MARGIN");

                    b.Property<string>("MerchanBankId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("MERCHAN_BANK_ID");

                    b.Property<int>("Mlot")
                        .HasColumnType("int")
                        .HasColumnName("MLOT");

                    b.Property<string>("MonTo")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("MON_TO");

                    b.Property<string>("Net")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("NET");

                    b.Property<decimal>("NoShrs")
                        .HasColumnType("decimal(17, 2)")
                        .HasColumnName("NO_SHRS");

                    b.Property<decimal?>("NsIcb")
                        .HasColumnType("decimal(17, 2)")
                        .HasColumnName("NS_ICB");

                    b.Property<decimal?>("NsMutual")
                        .HasColumnType("decimal(17, 2)")
                        .HasColumnName("NS_MUTUAL");

                    b.Property<decimal?>("NsUnit")
                        .HasColumnType("decimal(17, 2)")
                        .HasColumnName("NS_UNIT");

                    b.Property<DateTime?>("OpnDt")
                        .HasColumnType("datetime2")
                        .HasColumnName("OPN_DT");

                    b.Property<string>("Otc")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("OTC");

                    b.Property<decimal>("PaidCap")
                        .HasColumnType("decimal(17, 2)")
                        .HasColumnName("PAID_CAP");

                    b.Property<decimal?>("PeRatio")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PE_RATIO");

                    b.Property<int?>("Pmargin")
                        .HasColumnType("int")
                        .HasColumnName("PMARGIN");

                    b.Property<decimal?>("Premium")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("PREMIUM");

                    b.Property<string>("PrnSth")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PRN_STH");

                    b.Property<string>("ProVol")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("PRO_VOL");

                    b.Property<string>("Prod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PROD");

                    b.Property<string>("RegOff")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("REG_OFF");

                    b.Property<DateTime?>("RissuDtFm")
                        .HasColumnType("datetime2")
                        .HasColumnName("RISSU_DT_FM");

                    b.Property<DateTime?>("RissuDtTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("RISSU_DT_TO");

                    b.Property<DateTime?>("RtUpdDt")
                        .HasColumnType("datetime2")
                        .HasColumnName("RT_UPD_DT");

                    b.Property<decimal>("SbaseRt")
                        .HasColumnType("decimal(10, 4)")
                        .HasColumnName("SBASE_RT");

                    b.Property<string>("SectMajCd")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("SECT_MAJ_CD");

                    b.Property<string>("SectMinCd")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("SECT_MIN_CD");

                    b.Property<string>("Spnr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SPNR");

                    b.Property<DateTime?>("StartDt")
                        .HasColumnType("datetime2")
                        .HasColumnName("START_DT");

                    b.Property<string>("TaxHday")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("TAX_HDAY");

                    b.Property<string>("Tel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TEL");

                    b.Property<string>("Tlx")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("TLX");

                    b.Property<string>("TradeMeth")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("TRADE_METH");

                    b.Property<string>("TradePlatform")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("TRADE_PLATFORM");

                    b.HasKey("CompCd");

                    b.HasIndex("SectMajCd");

                    b.ToTable("COMP");
                });

            modelBuilder.Entity("StockMarket.Api.Models.SectMaj", b =>
                {
                    b.Property<string>("SectMajCd")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("SECT_MAJ_CD");

                    b.Property<string>("SectMajNm")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("SECT_MAJ_NM");

                    b.HasKey("SectMajCd");

                    b.ToTable("SECT_MAJ");
                });

            modelBuilder.Entity("StockMarket.Api.Models.SectMin", b =>
                {
                    b.Property<string>("SectMinCd")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("SECT_MIN_CD");

                    b.Property<string>("SectMajCd")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("SECT_MAJ_CD");

                    b.Property<string>("SectMinNm")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("SECT_MIN_NM");

                    b.HasKey("SectMinCd");

                    b.ToTable("SECT_MIN");
                });

            modelBuilder.Entity("StockMarket.Api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StockMarket.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StockMarket.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockMarket.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StockMarket.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StockMarket.Api.Models.Comp", b =>
                {
                    b.HasOne("StockMarket.Api.Models.SectMaj", "SectMaj")
                        .WithMany("Comps")
                        .HasForeignKey("SectMajCd")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectMaj");
                });

            modelBuilder.Entity("StockMarket.Api.Models.SectMaj", b =>
                {
                    b.Navigation("Comps");
                });
#pragma warning restore 612, 618
        }
    }
}
